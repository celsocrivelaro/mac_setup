set nocompatible              " be iMproved, required
filetype off                  " required

set shell=/bin/bash

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" close tags in HTML
Plugin 'alvan/vim-closetag'
" html css plugin
Plugin 'mattn/emmet-vim'

" Syntastic
Bundle 'https://github.com/scrooloose/syntastic.git'

" NerdTree
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'

" full path fuzzy search
Bundle 'kien/ctrlp.vim'

" Vim tab session
Bundle 'https://github.com/xolox/vim-misc'
Bundle 'https://github.com/xolox/vim-session'

" Vim Status/Tabline improver
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" git tools
Bundle 'tpope/vim-fugitive'

" Markdowm
Bundle 'https://github.com/plasticboy/vim-markdown.git'

" Ruby on Rails
Bundle 'https://github.com/vim-ruby/vim-ruby.git'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-endwise'
Bundle 'skalnik/vim-vroom'
" Rspec
Bundle 'thoughtbot/vim-rspec'

" Haskell
Bundle "https://github.com/neovimhaskell/haskell-vim"

"Bundle 'terryma/vim-multiple-cursors'

" Autocomplete
Bundle 'valloric/youcompleteme'

" Easy commenter
Bundle 'scrooloose/nerdcommenter'

" Color scheme
Plugin 'w0ng/vim-hybrid'

" Ack
Plugin 'mileszs/ack.vim'

" Ember
Plugin 'joukevandermaas/vim-ember-hbs'

call vundle#end()            " required
filetype plugin indent on    " required

" YouCompleteMe Mapping
imap <Tab> <C-P>

let g:syntastic_ruby_checkers = ['rubocop']

" Vim Arline theme and configs
let g:airline_theme = 'molokai'

let g:session_autoload = 'no'

set directory=$HOME/.vim/swapfiles/,.
" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch              " Highlight while searching with / or ?.

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =200       " Only highlight the first 200 columns.
set wrap

set clipboard=unnamed      " clipboard integration

set showmode               " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.

" Tabs
set tabstop=2
set shiftwidth=2
set expandtab

" Set number lines / relative
set number

" Modified but not saved
set warn
" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

syntax on

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langnoremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If unset (default), this may break plugins (but it's backward
  " compatible).
  set langnoremap
endif


" Remove trailing spaces
autocmd FileType c,python,java,ruby autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd BufRead,BufNewFile *.hbs setfiletype html
autocmd Filetype ruby setlocal ts=2 sw=2 sts=0 expandtab
autocmd Filetype python setlocal ts=4 sw=4 sts=0 expandtab

" Save file
map <Esc><Esc> :w<CR>

" NERDTree configs
map <C-n> :NERDTreeToggle<CR>

" Reload changes to .vimrc automatically
autocmd BufWritePost  ~/.vimrc source ~/.vimrc

" Restore session on starting Vim
autocmd VimEnter * NERDTree | wincmd p "Open nerdtree on vim opening

map <S-Right> :tabnext<CR>
map <S-Left>  :tabprevious<CR>
map <S-N>     :tabnew<CR>
map <S-Q>   :tabclose<CR>

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

